package leetcode

/*
224. 基本计算器

给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。

示例 1：

输入：s = "1 + 1"
输出：2


示例 2：

输入：s = " 2-1 + 2 "
输出：3


示例 3：

输入：s = "(1+(4+5+2)-3)+(6+8)"
输出：23

提示：

1 <= s.length <= 3*10的立方
s 由数字、'+'、'-'、'('、')'、和 ' ' 组成
s 表示一个有效的表达式


思路：

梳理下思路

之前想了好久没有想明白，当然有一点已经想到了，就是遇到括号，如果括号之前的是-，就把括号中的符号进行倒置，负的变正的，正的变负的。

当时有一点没有想不明白的是，对于嵌套的括号如何进行边界的处理

想的是用一个标识来处理对括号中的符号倒置的操作，但是多层的括号嵌套就不行了

看到了官方的解题思路，用栈，每次遇到一个括号，就把括号之前的符号压到栈中，这样就算是多层的括号，没遇到一个就压一个对应的符号到栈中，当然不禁会问，这样每个括号是如何对应起来的呢？？

其实最后遇到的(肯定是最先遇到），这样用栈就很Ok了，毕竟后进先出，然后这样就能很好的处理每个括号中的数据了

秒的很
*/

func calculate(s string) (ans int) {
	ops := []int{1}
	sign := 1
	n := len(s)
	for i := 0; i < n; {
		switch s[i] {
		case ' ':
			i++
		case '+':
			sign = ops[len(ops)-1]
			i++
		case '-':
			sign = -ops[len(ops)-1]
			i++
		case '(':
			ops = append(ops, sign)
			i++
		case ')':
			ops = ops[:len(ops)-1]
			i++
		default:
			num := 0
			for ; i < n && '0' <= s[i] && s[i] <= '9'; i++ {
				num = num*10 + int(s[i]-'0')
			}
			ans += sign * num
		}
	}
	return
}
